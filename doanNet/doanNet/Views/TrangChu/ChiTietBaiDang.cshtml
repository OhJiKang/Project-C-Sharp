@{
    ViewBag.Title = "ChiTietBaiDang";
    Layout = "~/Views/Shared/layout.cshtml";
}
<style>

    * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
    }

    body {
        background: #ebecf0;
        font-family: "Open Sans", sans-serif;
        min-height: 100vh;
    }

        body a {
            text-decoration: none;
            color: #172b4d;
        }

        body h1 {
            font-family: "Song Myung", serif;
        }
    /* DEFAULT STYLE */
    :root {
        font-size: 16px;
        --card-img-height: 200px;
    }

    .card-container {
        width: 100%;
        height: auto;
        display: flex;
        justify-content: center;
        align-items: center;
        transition: all 200ms ease-in-out;
    }

    .card {
        align-self: flex-start;
        position: relative;
        width: 220px;
        min-width: 100px;
        margin: 1.25rem 0.75rem;
        background: white;
        transition: all 300ms ease-in-out;
    }

        .card .card-img {
            visibility: hidden;
            width: 100%;
            height: 220px;
            background-repeat: no-repeat;
            background-position: center center;
            background-size: cover;
        }

        .card .card-img-hovered {
            --card-img-hovered-overlay: linear-gradient(to bottom, rgba(0, 0, 0, 0), rgba(0, 0, 0, 0));
            transition: all 350ms ease-in-out;
            background-repeat: no-repeat;
            background-position: center center;
            background-size: cover;
            width: 100%;
            position: absolute;
            height: var(--card-img-height);
            top: 0;
        }

        .card .card-info {
            position: relative;
            padding: 0.25rem 1rem;
            transition: all 200ms ease-in-out;
        }

            .card .card-info .card-about {
                display: flex;
                justify-content: space-between;
                align-items: center;
                transition: all 200ms ease-in-out;
            }

                .card .card-info .card-about .card-tag {
                    width: 60px;
                    max-width: 100px;
                    font-size: 12px;
                    text-align: center;
                    text-transform: uppercase;
                    letter-spacing: 1px;
                    background: #505f79;
                    color: #fff;
                }

                    .card .card-info .card-about .card-tag.tag-news {
                        background: #36b37e;
                    }

                    .card .card-info .card-about .card-tag.tag-deals {
                        background: #ffab00;
                    }

                    .card .card-info .card-about .card-tag.tag-politics {
                        width: 71px;
                        background: #ff5630;
                    }

            .card .card-info .card-title {
                z-index: 10;
                font-size: 22px;
                padding-bottom: 0.75rem;
                transition: all 350ms ease-in-out;
            }

            .card .card-info .card-creator {
                padding-bottom: 0.75rem;
                transition: all 250ms ease-in-out;
            }

        .card:hover {
            cursor: pointer;
            box-shadow: 0px 15px 35px rgba(227, 252, 239, 0.1), 0px 5px 15px rgba(0, 0, 0, 0.07);
            transform: scale(1.025);
        }

            .card:hover .card-img-hovered {
                --card-img-hovered-overlay: linear-gradient(to bottom, rgba(0, 0, 0, 0), rgba(0, 0, 0, 0.65));
                height: 100%;
            }

            .card:hover .card-about, .card:hover .card-creator {
                opacity: 0;
            }

            .card:hover .card-info {
                background-color: transparent;
            }

            .card:hover .card-title {
                color: #ebecf0;
                transform: translate(0, 40px);
            }

    .card-1 .card-img, .card-1 .card-img-hovered {
        background-image: var(--card-img-hovered-overlay), url();
    }

    .card-2 .card-img, .card-2 .card-img-hovered {
        background-image: var(--card-img-hovered-overlay), url(https://source.unsplash.com/C-v1p2DTakA);
    }

    .card-3 .card-img, .card-3 .card-img-hovered {
        background-image: var(--card-img-hovered-overlay), url(https://source.unsplash.com/V0L1LH7qWOQ);
    }

    .card-4 .card-img, .card-4 .card-img-hovered {
        background-image: var(--card-img-hovered-overlay), url(https://source.unsplash.com/zAi2Is48-MA);
    }

    .custom-button {
        background-color: white;
        color: #4b77be; /* Medium blue color */
        border: 2px solid #4b77be; /* Medium blue border */
        border-radius: 0; /* Square corners */
        font-weight: bold;
        padding: 5px 10px; /* Adjust padding as needed */
        font-size: 14px; /* Adjust font size as needed */
        cursor: pointer;
    }

        .custom-button:hover {
            background-color: gainsboro; /* Light gray on hover */
        }

    .custom-image {
        /* Define your custom styles here */
        width: 100px; /* Example width */
        height: auto; /* Maintain aspect ratio */
        /* Add any other styles as needed */
    }

    .post-tiltle {
        font-size: 22px;
    }

    .container {
        font-size: 12px;
        padding: 20px;
    }

    .post-created {
        font-size: 70%;
        font-style: italic;
        color: #ccc;
    }

</style>

@{
    var posts = ViewBag.Posts as List<doanNet.Models.Post>;
    @functions {
        // Define the getOppositeColor function
        string GetOppositeColor(string hexColor)
        {
            // Remove '#' if present
            hexColor = hexColor.Replace("#", "");

            // Convert hex to RGB
            int r = Convert.ToInt32(hexColor.Substring(0, 2), 16);
            int g = Convert.ToInt32(hexColor.Substring(2, 2), 16);
            int b = Convert.ToInt32(hexColor.Substring(4, 2), 16);

            // Calculate relative luminance (brightness)
            double luminance = (0.2126 * r + 0.7152 * g + 0.0722 * b) / 255;

            // Determine contrasting color based on luminance threshold
            return luminance > 0.5 ? "#000000" : "#FFFFFF";
        }
    }
}

@if (posts != null)
{
    foreach (var post in posts)
    {
        List<int> categories = new List<int>();
        List<string> categoriesName = new List<string>();
        HashSet<int> postRelated = new HashSet<int>();

        // Extracting date and time parts
        string datePart = post.DateBegin.ToShortDateString(); // Date part
        string timePart = post.DateBegin.ToShortTimeString(); // Time part
        <div class="container">
            <div class="row" style="padding-top: 50px">
                <h1 class="fw-bold post-tiltle">@post.PostTitle</h1>
                <div class="post-meta">
                    <span class="post-created">TDTU, @datePart | @timePart, GMT+7 </span>
                    <hr class="border-2 border-dark" />
                </div>
                @Html.Raw(post.PostDetail)


            </div>
            <div class="row" style="text-align:center;">
                <h4 style="font-weight: bold">Thẻ</h4>
                <hr style="border-top: 4px solid blue;">

            </div>
            <div class="row justify-content-center " style="padding:10px">
                @foreach (var categorybridge in ViewBag.categoryBridges)
                {

                    if (categorybridge.IDPost == post.IDPost)
                    {
                        categories.Add(categorybridge.IDCategory);
                    }
                }

                @foreach (var category in ViewBag.Category)
                {
                    foreach (int id in categories)
                    {
                        if (category.IDCategory == id)
                        {
                            var oppositeColorForText = GetOppositeColor(category.ColorChip);

                            <a href="#" class="badge" style="font-size: 18px; color: @(oppositeColorForText); background-color: @category.ColorChip; margin-left: 12px; display: inline-block; width:fit-content" id="@category.IDCategory">@category.CategoryTitle</a>
                        }
                    }
                }
            </div>
            @foreach (var p in ViewBag.categoryBridges)
            {
                foreach (int id in categories)
                {

                    if (id == p.IDCategory && p.IDPost != post.IDPost)
                    {
                        postRelated.Add(p.IDPost); // Add unique IDs to the HashSet
                    }
                }
            }
            <div class="row" style="text-align:center">
                <h4 style="font-weight: bold">Các bài viết liên quan</h4>
                <hr style="border-top: 4px solid blue;">

            </div>
            <div class="card-container">
                @foreach (var p in ViewBag.allPosts)
                {
                    var i = 0;
                    foreach (int id in postRelated)
                    {
                        if (id == p.IDPost)
                        {

                            <div class="card card-1" style="background-image: var(--card-img-hovered-overlay), url('../../Content/upload/img/news/@p.PostImage')">
                                <div class="card-img" style="background-image: var(--card-img-hovered-overlay), url('../../Content/upload/img/news/@p.PostImage')"></div>
                                <a href="" class="card-link">
                                    <div class="card-img-hovered" style="background-image: var(--card-img-hovered-overlay), url('../../Content/upload/img/news/@p.PostImage')"></div>
                                </a>
                                <div class="card-info">
                                    <div class="card-about">

                                        <div class="card-time">@p.DateBegin.ToShortDateString()</div>
                                    </div>
                                    <h1 class="card-title">@p.PostTitle</h1>
                                    <div class="card-creator"> </div>
                                </div>
                            </div>


                            i++;
                        }
                    }
                }
            </div>

        </div>

    }

}
else
{
    <p>No posts found.</p>
}